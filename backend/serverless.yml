service:
  name: serverless-image-watermark-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-plugin-canary-deployments
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    IMAGES_TABLE: Images-${self:provider.stage}
    INDEX_NAME: ImageIdIndex
    IMAGE_INDEX_NAME: ImageIdOnlyIndex
    IMAGES_S3_BUCKET: serverless-watermark-images-nilsdev-${self:provider.stage}
    THUMBNAILS_S3_BUCKET: serverless-watermark-thumbnails-nilsdev-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 600
    ELASTICSEARCH_URL:
      Fn::GetAtt: ["ImageSearch", "DomainEndpoint"]
    SNS_ARN_CREATE:
      Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - imageCreateTopic-${self:provider.stage}
    IMAGE_CREATE_TOPIC: imageCreateTopic-${self:provider.stage}
    SNS_ARN_WATERMARK:
      Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - imageWatermarkTopic-${self:provider.stage}
    IMAGE_WATERMARK_TOPIC: imageWatermarkTopic-${self:provider.stage}
    SNS_ARN_DELETE:
      Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - imageDeleteTopic-${self:provider.stage}
    IMAGE_DELETE_TOPIC: imageDeleteTopic-${self:provider.stage}

custom:
  topicName: imagesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Images API
        description: Serverless application for image process requests creation
    models:
      - name: CreateImageRequest
        contentType: application/json
        schema: ${file(models/create-image-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetImages:
    handler: src/lambda/http/getImages.handler
    events:
      - http:
          method: get
          path: images
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  GetTodosElastic:
    handler: src/lambda/http/getImagesElastic.handler
    events:
      - http:
          authorizer: Auth
          method: get
          path: images/elastic
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - es:*
        Resource: "*"


  # TODO: Configure this function
  CreateImage:
    handler: src/lambda/http/createImage.handler
    events:
      - http:
          method: post
          path: images
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new image process request
            description: Create a new image process request
            requestModels:
              'application/json': CreateImageRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - es:*
        Resource: "*"
      - Effect: Allow
        Action:
          - sns:Publish
          - sns:Subscribe
        Resource:
          - "*"

  DeleteImage:
    handler: src/lambda/http/deleteImage.handler
    events:
      - http:
          method: delete
          path: image/{imageId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: image/{imageId}/file
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:PutObjectTagging
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
       - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  ImageWatermark:
    handler: src/lambda/s3/watermarkImage.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:PutObjectTagging
          - s3:GetObjectTagging
        Resource: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*
   
  ImageIndexCreateDoc:
    handler: src/lambda/sns/imageCreateSubscriber.handler
    events:
      - sns:
          arn: !Ref ImageCreateTopic
          topicName: ${self:provider.environment.IMAGE_CREATE_TOPIC}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  ImageIndexUpdateDoc:
    handler: src/lambda/sns/imageUpdateSubscriber.handler
    events:
      - sns:
          arn: !Ref ImageWatermarkTopic
          topicName: ${self:provider.environment.IMAGE_WATERMARK_TOPIC}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  ImageIndexDeleteDoc:
    handler: src/lambda/sns/imageDeleteSubscriber.handler
    events:
      - sns:
          arn: !Ref ImageDeleteTopic
          topicName: ${self:provider.environment.IMAGE_DELETE_TOPIC}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdDate
            AttributeType: S
          - AttributeName: processDate
            AttributeType: S
          - AttributeName: processed
            AttributeType: S
          - AttributeName: uploadUrl
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: watermark
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IMAGES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_INDEX_NAME}
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: uploadUrl
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ThumbnailBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAIL_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImageWatermarkTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Policy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*' # Anyone
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Bucket: !Ref AttachmentBucket

    CreateSNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic

    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ThumbnailsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Policy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*' # Anyone
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*
        Bucket: !Ref ThumbnailsBucket

    UpdateSNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImageUploadTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}
        Topics:
          - !Ref ImageUploadTopic

    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}
    
    ImageCreateTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image create topic
        TopicName: ${self:provider.environment.IMAGE_CREATE_TOPIC}

    ImageWatermarkTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image watermark topic
        TopicName: ${self:provider.environment.IMAGE_WATERMARK_TOPIC}

    ImageDeleteTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image deletion topic
        TopicName: ${self:provider.environment.IMAGE_DELETE_TOPIC}

    ImageSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: image-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'